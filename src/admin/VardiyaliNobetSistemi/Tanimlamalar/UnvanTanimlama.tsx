import React, { useState, useEffect } from 'react';
import { useAuthContext } from '../../../contexts/AuthContext';
import { apiRequest, getTableData, addTableData, deleteTableData, clearTableCache, updateTableData, clearAllCache } from '../../../lib/api';
import API_CONFIG from '../../../lib/api';
import { Trash2, Plus, Clock, CheckCircle, X } from 'lucide-react';

interface Unvan {
  id: number;
  unvan_adi: string;
  kurum_id: string;
}

interface MesaiTanimi {
  id: string;
  mesaiAdi: string;
  mesaiSaati: number;
}

interface KaydedilenMesai {
  id: number;
  mesai_adi: string;
  gunler: string;
  mesai_saati: number;
  kurum_id: string;
  departman_id: string;
  birim_id: string;
}

const UnvanTanimlama: React.FC = () => {
  const { user } = useAuthContext();
  const [unvanlar, setUnvanlar] = useState<Unvan[]>([]);
  const [yeniUnvan, setYeniUnvan] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // Mesai form state'leri
  const [mesaiAdi, setMesaiAdi] = useState('');
  const [mesaiSaati, setMesaiSaati] = useState<number>(8);
  
  // T√ºm kaydedilen mesai t√ºrleri i√ßin state
  const [kaydedilenMesaiTurleri, setKaydedilenMesaiTurleri] = useState<KaydedilenMesai[]>([]);
  const [mesaiLoading, setMesaiLoading] = useState(false);

  // Mesai t√ºrlerini fresh olarak y√ºkle - KURAL 17 G√úVENLƒ∞K D√úZELTMESƒ∞
  const loadMesaiTurleri = async () => {
    if (!user?.kurum_id || !user?.departman_id || !user?.birim_id) return;

    setMesaiLoading(true);
    try {
      // KURAL 17: T√ºm cache'leri zorla temizle - g√ºvenlik √∂nlemi
      clearAllCache();
      clearTableCache('73');
      
      // KURAL 17: Direkt API √ßaƒürƒ±sƒ± - cache bypass
      const response = await fetch('/.netlify/functions/api-proxy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          path: '/api/v1/data/table/73',
          method: 'GET',
          // 3-Layer Authentication
          apiKey: API_CONFIG.apiKey,
          userEmail: API_CONFIG.userEmail,
          projectPassword: API_CONFIG.projectPassword
        })
      });

      if (!response.ok) {
        throw new Error('API request failed');
      }

      const data = await response.json();
      
      if (data.success && data.data && Array.isArray(data.data.rows)) {
        // KURAL 17: G√ºvenli filtreleme - kullanƒ±cƒ± bilgilerine g√∂re
        const filteredMesai = data.data.rows.filter((mesai: any) => 
          mesai.kurum_id === user.kurum_id &&
          mesai.departman_id === user.departman_id &&
          mesai.birim_id === user.birim_id
        );
        setKaydedilenMesaiTurleri(filteredMesai);
      } else {
        setKaydedilenMesaiTurleri([]);
      }
    } catch (error) {
      console.error('Mesai t√ºrleri y√ºklenirken hata:', error);
      // Tablo yoksa bo≈ü array set et, hata verme
      setKaydedilenMesaiTurleri([]);
    } finally {
      setMesaiLoading(false);
    }
  };

  useEffect(() => {
    // Load unvanlar from HZM API - KURAL 17 G√úVENLƒ∞K D√úZELTMESƒ∞
    const loadUnvanlar = async () => {
      if (user?.kurum_id && user?.departman_id && user?.birim_id) {
        setLoading(true);
        setError(null);
        
        try {
          // KURAL 17: T√ºm cache'leri zorla temizle - g√ºvenlik √∂nlemi
          clearAllCache();
          clearTableCache('69');
          
          // KURAL 17: Direkt API √ßaƒürƒ±sƒ± - cache bypass
          const response = await fetch('/.netlify/functions/api-proxy', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              path: '/api/v1/data/table/69',
              method: 'GET',
              // 3-Layer Authentication
              apiKey: API_CONFIG.apiKey,
              userEmail: API_CONFIG.userEmail,
              projectPassword: API_CONFIG.projectPassword
            })
          });

          if (!response.ok) {
            throw new Error('API request failed');
          }

          const data = await response.json();
          
          if (data.success && data.data && Array.isArray(data.data.rows)) {
            // KURAL 17: G√ºvenli filtreleme - kullanƒ±cƒ± bilgilerine g√∂re
            const filteredUnvanlar = data.data.rows.filter((unvan: any) => 
              unvan.kurum_id === user.kurum_id &&
              unvan.departman_id === user.departman_id &&
              unvan.birim_id === user.birim_id
            );
            setUnvanlar(filteredUnvanlar);
          } else {
            setUnvanlar([]);
          }
        } catch (error) {
          console.error('üö® √únvanlar y√ºklenemedi:', error);
          // Tablo yoksa bo≈ü array set et ve bilgilendirici mesaj g√∂ster
          setUnvanlar([]);
          const errorMessage = error instanceof Error ? error.message : String(error);
          if (errorMessage.includes('404') || errorMessage.includes('401')) {
            setError('√únvan tablosu bulunamadƒ±. L√ºtfen √∂nce tabloyu olu≈üturun.');
          } else {
            setError('√únvanlar y√ºklenemedi. L√ºtfen tekrar deneyin.');
          }
        } finally {
          setLoading(false);
        }
      } else {
        setLoading(false);
      }
    };
    
    loadUnvanlar();
    loadMesaiTurleri();
  }, [user?.kurum_id, user?.departman_id, user?.birim_id]);

  const handleUnvanEkle = async () => {
    if (!yeniUnvan.trim()) {
      setError('√únvan adƒ± gereklidir');
      return;
    }

    if (!user?.kurum_id || !user?.departman_id || !user?.birim_id) {
      setError('Kullanƒ±cƒ± bilgisi bulunamadƒ±');
      return;
    }

    try {
      // KURAL 17: Fresh data ile duplicate ve ID kontrol√º
      clearAllCache();
      clearTableCache('69');
      
      // KURAL 17: Direkt API √ßaƒürƒ±sƒ± ile fresh data al
      const response = await fetch('/.netlify/functions/api-proxy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          path: '/api/v1/data/table/69',
          method: 'GET',
          // 3-Layer Authentication
          apiKey: API_CONFIG.apiKey,
          userEmail: API_CONFIG.userEmail,
          projectPassword: API_CONFIG.projectPassword
        })
      });

      if (!response.ok) {
        throw new Error('API request failed');
      }

      const data = await response.json();
      let unvanArray: any[] = [];
      
      if (data.success && data.data && Array.isArray(data.data.rows)) {
        // KURAL 17: G√ºvenli filtreleme - aynƒ± kullanƒ±cƒ± bilgileriyle
        unvanArray = data.data.rows.filter((unvan: any) => 
          unvan.kurum_id === user.kurum_id &&
          unvan.departman_id === user.departman_id &&
          unvan.birim_id === user.birim_id
        );
      }
      
      // √áƒ∞FT KAYIT KONTROL√ú - B√ºy√ºk/k√º√ß√ºk harf duyarsƒ±z
      const normalizedNewUnvan = yeniUnvan.trim().toUpperCase().replace(/ƒ∞/g, 'I').replace(/ƒû/g, 'G').replace(/√ú/g, 'U').replace(/≈û/g, 'S').replace(/√ñ/g, 'O').replace(/√á/g, 'C');
      const isDuplicate = unvanArray.some((unvan: any) => {
        const normalizedExisting = (unvan.unvan_adi || '').toUpperCase().replace(/ƒ∞/g, 'I').replace(/ƒû/g, 'G').replace(/√ú/g, 'U').replace(/≈û/g, 'S').replace(/√ñ/g, 'O').replace(/√á/g, 'C');
        return normalizedExisting === normalizedNewUnvan;
      });
      
      if (isDuplicate) {
        setError(`"${yeniUnvan}" √ºnvanƒ± zaten mevcut. Aynƒ± √ºnvan tekrar eklenemez.`);
        return;
      }
      
      // KURAL 17: Benzersiz ID generation - timestamp ekleyerek
      const timestamp = Date.now();
      const nextSira = unvanArray.length + 1;
      
      // DOƒûRU FORMAT: kurum_D#_B#_sira_timestamp (BENZERSIZ)
      const departmanKodu = user.departman_id.split('_')[1] || 'D1'; // "6_D1" -> "D1"
      const birimKodu = user.birim_id.split('_')[1] || 'B1'; // "6_B1" -> "B1"
      const unvanId = `${user.kurum_id}_${departmanKodu}_${birimKodu}_${nextSira}_${timestamp}`;

      const newUnvan = {
        unvan_id: unvanId,
        unvan_adi: yeniUnvan.trim(),
        kurum_id: user.kurum_id,
        departman_id: user.departman_id,
        birim_id: user.birim_id,
        aktif_mi: true
      };

      // YENƒ∞ TABLO ID: 69
      const result = await addTableData('69', newUnvan);

      if (result.success) {
        // KURAL 17: Cache'i zorla temizle
        clearAllCache();
        clearTableCache('69');
        
        // KURAL 17: Fresh veriyi direkt API ile yeniden y√ºkle
        const reloadResponse = await fetch('/.netlify/functions/api-proxy', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            path: '/api/v1/data/table/69',
            method: 'GET',
            // 3-Layer Authentication
            apiKey: API_CONFIG.apiKey,
            userEmail: API_CONFIG.userEmail,
            projectPassword: API_CONFIG.projectPassword
          })
        });

        if (reloadResponse.ok) {
          const reloadData = await reloadResponse.json();
          if (reloadData.success && reloadData.data && Array.isArray(reloadData.data.rows)) {
            // KURAL 17: G√ºvenli filtreleme - kullanƒ±cƒ± bilgilerine g√∂re
            const filteredUnvanlar = reloadData.data.rows.filter((unvan: any) => 
              unvan.kurum_id === user.kurum_id &&
              unvan.departman_id === user.departman_id &&
              unvan.birim_id === user.birim_id
            );
            setUnvanlar(filteredUnvanlar);
          }
        }
        
        setYeniUnvan('');
        setError(null);
      } else {
        setError('√únvan eklenemedi: ' + result.error);
      }
    } catch (error) {
      console.error('√únvan ekleme hatasƒ±:', error);
      setError('√únvan eklenemedi. L√ºtfen tekrar deneyin.');
    }
  };

  const handleUnvanSil = async (unvanId: number) => {
    try {
      const result = await deleteTableData('69', unvanId.toString());

      if (result.success && user) {
        // Cache'i zorla temizle
        clearAllCache();
        clearTableCache('69');
        
        // Fresh veriyi yeniden y√ºkle
        const filterParams = `kurum_id=${user.kurum_id}&departman_id=${user.departman_id}&birim_id=${user.birim_id}`;
        const data = await getTableData('69', filterParams, true);
        const unvanArray = Array.isArray(data) ? data : [];
        setUnvanlar(unvanArray);
        
        console.log('‚úÖ √únvan silindi ve liste g√ºncellendi:', data);
      } else {
        setError('√únvan silinemedi: ' + result.error);
      }
    } catch (error) {
      console.error('√únvan silme hatasƒ±:', error);
      setError('√únvan silinemedi. L√ºtfen tekrar deneyin.');
    }
  };



  const handleMesaiEkle = async () => {
    if (!mesaiAdi.trim()) {
      showErrorToast('Mesai adƒ± gereklidir!');
      return;
    }

    if (!user?.kurum_id || !user?.departman_id || !user?.birim_id) {
      showErrorToast('Kullanƒ±cƒ± bilgileri eksik!');
      return;
    }

    // Yeni mesai ID'si olu≈ütur
    const existingMesaiTurleri = await getTableData('73', `kurum_id=${user.kurum_id}&departman_id=${user.departman_id}&birim_id=${user.birim_id}`);
    const mesaiArray = Array.isArray(existingMesaiTurleri) ? existingMesaiTurleri : [];
    
    // √áƒ∞FT KAYIT KONTROL√ú - Mesai adƒ± ve saati kontrol√º
    const normalizedNewMesai = mesaiAdi.trim().toUpperCase().replace(/ƒ∞/g, 'I').replace(/ƒû/g, 'G').replace(/√ú/g, 'U').replace(/≈û/g, 'S').replace(/√ñ/g, 'O').replace(/√á/g, 'C');
    const isDuplicateName = mesaiArray.some((mesai: any) => {
      const normalizedExisting = (mesai.mesai_adi || '').toUpperCase().replace(/ƒ∞/g, 'I').replace(/ƒû/g, 'G').replace(/√ú/g, 'U').replace(/≈û/g, 'S').replace(/√ñ/g, 'O').replace(/√á/g, 'C');
      return normalizedExisting === normalizedNewMesai;
    });
    
    const isDuplicateHour = mesaiArray.some((mesai: any) => {
      return parseInt(mesai.mesai_saati) === parseInt(mesaiSaati.toString());
    });
    
    if (isDuplicateName) {
      showErrorToast(`"${mesaiAdi}" mesai t√ºr√º zaten mevcut. Aynƒ± mesai t√ºr√º tekrar eklenemez.`);
      return;
    }
    
    if (isDuplicateHour) {
      showErrorToast(`${mesaiSaati} saatlik mesai t√ºr√º zaten mevcut. Aynƒ± mesai saati tekrar eklenemez.`);
      return;
    }
    
    const nextSira = mesaiArray.length + 1;
    
    // DOƒûRU FORMAT: kurum_D#_B#_sira (HIYERARSIK_ID_SISTEMI.md uyumlu)
    const departmanKodu = user.departman_id.split('_')[1] || 'D1'; // "6_D1" -> "D1"
    const birimKodu = user.birim_id.split('_')[1] || 'B1'; // "6_B1" -> "B1"
    const mesaiId = `${user.kurum_id}_${departmanKodu}_${birimKodu}_${nextSira}`;

    const mesaiData = {
      mesai_id: mesaiId,
      mesai_adi: mesaiAdi,
      gunler: JSON.stringify(['Haftalƒ±k']),
      mesai_saati: parseInt(mesaiSaati.toString()),
      kurum_id: user.kurum_id,
      departman_id: user.departman_id,
      birim_id: user.birim_id,
      aktif_mi: true
    };

    try {
      console.log('üöÄ Mesai kaydediliyor:', mesaiData);
      
      // T√ºm cache'i temizle
      clearAllCache();
      
      const result = await addTableData('73', mesaiData);
      
      if (result.success) {
        console.log('‚úÖ Mesai ba≈üarƒ±yla kaydedildi');
        
        // Cache'i tekrar temizle ve fresh data √ßek
        clearTableCache('73');
        
        // Formu temizle
        setMesaiAdi('');
        setMesaiSaati(8);
        
        // Fresh data √ßek
        await loadMesaiTurleri();
        
        showSuccessToast('Mesai t√ºr√º ba≈üarƒ±yla kaydedildi!');
      } else {
        console.error('‚ùå Mesai kaydetme hatasƒ±:', result.error);
        showErrorToast('Mesai t√ºr√º kaydedilemedi: ' + (result.error || 'Bilinmeyen hata'));
      }
    } catch (error) {
      console.error('üö® Mesai kaydetme hatasƒ±:', error);
      showErrorToast('Mesai t√ºr√º kaydedilirken hata olu≈ütu');
    }
  };



  // Mesai t√ºr√ºn√º veritabanƒ±ndan sil
  const handleMesaiTuruSil = async (mesaiId: number) => {
    if (!confirm('Bu mesai t√ºr√ºn√º silmek istediƒüinizden emin misiniz?')) {
      return;
    }

    try {
      console.log('üóëÔ∏è Mesai t√ºr√º siliniyor:', mesaiId);
      
      // Cache'i temizle
      clearTableCache('73');
      
      const result = await deleteTableData('73', mesaiId.toString());
      
      console.log('üì• Silme API yanƒ±tƒ±:', result);
      
      if (result.success) {
        console.log('‚úÖ Mesai t√ºr√º ba≈üarƒ±yla silindi');
        
        // Cache'i tekrar temizle ve fresh data √ßek
        clearAllCache();
        await loadMesaiTurleri();
        
        showSuccessToast('Mesai t√ºr√º ba≈üarƒ±yla silindi!');
      } else {
        console.error('‚ùå Silme API Hatasƒ±:', result.error);
        showErrorToast('Mesai t√ºr√º silinemedi: ' + (result.error || 'Bilinmeyen hata'));
      }
    } catch (error) {
      console.error('üö® Mesai t√ºr√º silme hatasƒ±:', error);
      showErrorToast('Mesai t√ºr√º silinirken hata olu≈ütu');
    }
  };

  // Toast mesajlarƒ±
  const [toasts, setToasts] = useState<Array<{id: number, message: string, type: 'success' | 'error'}>>([]);

  const showSuccessToast = (message: string) => {
    const id = Date.now();
    setToasts(prev => [...prev, { id, message, type: 'success' }]);
    setTimeout(() => {
      setToasts(prev => prev.filter(toast => toast.id !== id));
    }, 3000);
  };

  const showErrorToast = (message: string) => {
    const id = Date.now();
    setToasts(prev => [...prev, { id, message, type: 'error' }]);
    setTimeout(() => {
      setToasts(prev => prev.filter(toast => toast.id !== id));
    }, 4000);
  };

  const removeToast = (id: number) => {
    setToasts(prev => prev.filter(toast => toast.id !== id));
  };

  if (!user?.kurum_id || !user?.departman_id || !user?.birim_id) {
    return <div>Y√ºkleniyor, l√ºtfen bekleyin...</div>;
  }

  return (
    <div className="space-y-6">
      {/* Toast Container */}
      <div className="fixed top-4 right-4 z-50 space-y-2">
        {toasts.map(toast => (
          <div
            key={toast.id}
            className={`flex items-center gap-3 px-4 py-3 rounded-lg shadow-lg min-w-[300px] animate-slide-in ${
              toast.type === 'success' 
                ? 'bg-green-100 text-green-800 border border-green-200' 
                : 'bg-red-100 text-red-800 border border-red-200'
            }`}
          >
            {toast.type === 'success' ? (
              <CheckCircle className="w-5 h-5 text-green-600" />
            ) : (
              <X className="w-5 h-5 text-red-600" />
            )}
            <span className="flex-1 font-medium">{toast.message}</span>
            <button
              onClick={() => removeToast(toast.id)}
              className="text-gray-400 hover:text-gray-600 transition-colors"
            >
              <X className="w-4 h-4" />
            </button>
          </div>
        ))}
      </div>

      {/* Haftalƒ±k Minimum Mesai Tanƒ±mlama */}
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-xl font-bold text-gray-800 mb-4 flex items-center gap-2">
          <Clock className="w-5 h-5" />
          Haftalƒ±k Minimum Mesai Tanƒ±mlama
        </h2>

        {/* Mesai Ekleme Formu */}
        <div className="space-y-4 mb-6">
          {/* Mesai Adƒ± - √ústte tek ba≈üƒ±na */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Mesai Adƒ±
            </label>
            <input
              type="text"
              value={mesaiAdi}
              onChange={(e) => setMesaiAdi(e.target.value)}
              placeholder="√ñrn: Tam Mesai, Part-Time, Vardiyalƒ± √áalƒ±≈üma, Esnek Mesai"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
            />
          </div>
          
          {/* Haftalƒ±k Saat ve Ekle butonu - Altta yan yana */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Haftalƒ±k Saat
              </label>
              <input
                type="number"
                value={mesaiSaati}
                onChange={(e) => setMesaiSaati(Number(e.target.value))}
                min="1"
                max="168"
                placeholder="40"
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div className="flex items-end">
              <button
                onClick={handleMesaiEkle}
                className="w-full bg-green-600 hover:bg-green-700 text-white font-medium py-3 px-4 rounded-lg transition-colors flex items-center justify-center gap-2"
              >
                <Plus className="w-5 h-5" />
                Ekle
              </button>
            </div>
          </div>
        </div>

        {/* Kaydedilen Mesai T√ºrleri */}
        <div className="border-t border-gray-200 pt-6 mt-6">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">Kaydedilen Mesai T√ºrleri</h3>
          
          {mesaiLoading ? (
            <div className="text-center py-6">
              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto"></div>
              <p className="mt-2 text-gray-600 text-sm">Mesai t√ºrleri y√ºkleniyor...</p>
            </div>
          ) : kaydedilenMesaiTurleri.length === 0 ? (
            <div className="text-center py-6">
              <p className="text-gray-500 text-sm">Hen√ºz kaydedilmi≈ü mesai t√ºr√º bulunmuyor</p>
            </div>
          ) : (
            <div className="space-y-2">
              {kaydedilenMesaiTurleri.map((mesai) => (
                <div key={mesai.id} className="bg-gray-50 p-3 rounded-lg border border-gray-200 hover:shadow-sm transition-shadow">
                  <div className="flex justify-between items-center">
                    <div className="flex-1">
                      <h4 className="font-medium text-gray-800">{mesai.mesai_adi}</h4>
                      <div className="text-gray-600 text-sm">
                        <span className="font-medium">Haftalƒ±k Kapasite:</span> {mesai.mesai_saati} saat
                      </div>
                    </div>
                    <button
                      onClick={() => handleMesaiTuruSil(mesai.id)}
                      className="text-red-500 hover:text-red-700 transition-colors ml-4 flex-shrink-0"
                      title="Mesai t√ºr√ºn√º sil"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Mevcut Unvan Tanƒ±mlarƒ± */}
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-xl font-bold text-gray-800 mb-4 flex items-center gap-2">
          <Plus className="w-5 h-5" />
          Personel √únvan Tanƒ±mlarƒ±
        </h2>

        {/* Yeni Unvan Ekleme */}
        <div className="flex gap-3 mb-6">
        <input
          type="text"
            value={yeniUnvan}
            onChange={(e) => setYeniUnvan(e.target.value)}
          placeholder="YENƒ∞ √úNVAN Gƒ∞Rƒ∞N"
            className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            onKeyPress={(e) => e.key === 'Enter' && handleUnvanEkle}
        />
        <button
          onClick={handleUnvanEkle}
            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-medium transition-colors"
        >
            +
        </button>
      </div>

        {/* Unvan Listesi */}
        {loading ? (
          <div className="text-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
            <p className="mt-2 text-gray-600">Y√ºkleniyor...</p>
          </div>
        ) : error ? (
          <div className="text-center py-8">
            <p className="text-red-600">{error}</p>
          </div>
        ) : (
          <div className="space-y-3">
            {unvanlar.map((unvan) => (
              <div key={unvan.id} className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                <span className="font-medium text-gray-800">{unvan.unvan_adi}</span>
            <button
                  onClick={() => handleUnvanSil(unvan.id)}
                  className="text-red-500 hover:text-red-700 transition-colors"
            >
              <Trash2 className="w-4 h-4" />
            </button>
          </div>
        ))}
      </div>
        )}
        </div>
    </div>
  );
};

export default UnvanTanimlama; 